// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String       @unique @id @default(uuid())
  name         String
  description  String
  price        Float
  amount       Int
  category     String?
  brand        String?
  supplier     String?
  companyId    String
  company      Company  @relation(fields: [companyId], references: [id])
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime  @updatedAt
  requests     OrderItem[]
}

model Company {
  id           String    @unique @id @default(uuid())
  name         String
  address      String
  email        String
  password     String
  phone        String
  cnpj         String    @unique
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime  @updatedAt
  products     Product[]
  customers    Client[]
}

model Client {
  id           String       @unique @id @default(uuid())
  name         String
  adress       String
  email        String
  phone        String?
  cnpj_cpf     String?   @unique
  companyId    String?
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime  @updatedAt
  company      Company?  @relation(fields: [companyId], references: [id])
  order        Order[]
}

model Order {
  id           String       @unique @id @default(uuid())
  client       Client   @relation(fields: [clientId], references: [id])
  clientId     String
  date         DateTime  @default(now())
  status       String
  paytype      String?
  amount       Float?
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime  @updatedAt
  items        OrderItem[]
}

model OrderItem {
  id            String       @unique @id @default(uuid())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  amount        Int
  unitPrice     Float
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime  @updatedAt
}

